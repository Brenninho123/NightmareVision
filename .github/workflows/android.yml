name: Android Build
on:
  push:
    branches: ['main']
  workflow_dispatch:
  workflow_call:
jobs:
  build:
    name: Android Build
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: Pulling the new commit
        uses: actions/checkout@v4
      - name: Setting up Haxe
        uses: krdlab/setup-haxe@v1
        with:
          haxe-version: 4.3.0
      - name: Restore existing build cache for faster compilation
        uses: actions/cache@v4
        with:
          # not caching the bin folder to prevent asset duplication and stuff like that
          key: cache-build-android
          path: |
            .haxelib/
            export/release/android/haxe/
            export/release/android/obj/
          restore-keys: |
            cache-build-android
      - name: Installing/Updating libraries
        run: |
          haxe -cp commandline -D analyzer-optimize --run Main setup -s
      - name: Configuring Android
        run: |
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_LATEST_HOME
          haxelib run lime config JAVA_HOME $JAVA_HOME_21_X64
          haxelib run lime config ANDROID_SETUP true
      - name: Building the game
        run: haxelib run lime build android -final
      - name: Uploading artifact (entire build)
        uses: actions/upload-artifact@v4
        with:
          name: Codename Engine Android
          path: export/release/android/bin/app/build/outputs/apk/release/*.apk
      - name: Clearing already existing cache
        uses: actions/github-script@v6
        with:
          script: |
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            for (const cache of caches.data.actions_caches) {
              if (cache.key == "cache-build-android") {
                console.log('Clearing ' + cache.key + '...')
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                })
                console.log("Cache cleared.")
              }
            }
      - name: Uploading new cache
        uses: actions/cache@v4
        with:
          # caching again since for some reason it doesnt work with the first post cache shit
          key: cache-build-android
          path: |
            .haxelib/
            export/release/android/haxe/
            export/release/android/obj/
          restore-keys: |
            cache-build-android
            haxe compile.hxml
            cd ../..
      - name: Compile
        run: haxelib run lime build Project.xml linux -D ${{ inputs.buildFlags }}
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: linuxBuild
          path: 'export/release/linux/bin' 
  buildWindows:
    runs-on: windows-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.0

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup C:/haxelib
          haxelib install hxcpp > nul
          haxelib install hxpkg --global
          haxelib run hxpkg setup --global
          hxpkg install
          haxelib list
        shell: cmd
      - name: Compile hxcpp
        run: |
          cd C:/haxelib/hxcpp/git/tools/run
          haxe compile.hxml
          cd ..
          cd ./hxcpp
          haxe compile.hxml
          cd ../..
      - name: Compile
        run: haxelib run lime build windows -D ${{ inputs.buildFlags }}
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: windowsBuild
          path: export/release/windows/bin
  buildMacIntel:
    runs-on: macos-15

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hxpkg --global
          haxelib run hxpkg setup --global
          hxpkg install
      - name: Compile hxcpp
        run: |
          cd ~/haxelib/hxcpp/git/tools/run
          haxe compile.hxml
          cd ..
          cd ./hxcpp
          haxe compile.hxml
          cd ../..
      - name: Compile
        run: |
          haxelib run lime build mac -64 -D ${{ inputs.buildFlags || 'commit' }} -D HXCPP_M64
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: macBuild-intel
          path: export/release/macos/bin

  buildMacArm:
    runs-on: macos-15

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.7
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxelib install hxpkg --global
          haxelib run hxpkg setup --global
          hxpkg install
      - name: Compile hxcpp
        run: |
          cd ~/haxelib/hxcpp/git/tools/run
          haxe compile.hxml
          cd ..
          cd ./hxcpp
          haxe compile.hxml
          cd ../..
      - name: Compile
        run: |
          haxelib run lime build mac -arm64 -D ${{ inputs.buildFlags }} -D HXCPP_ARM64
      - name: Publish Artifact
        uses: actions/upload-artifact@main
        with:
          name: macBuild-arm
          path: export/release/macos/bin
